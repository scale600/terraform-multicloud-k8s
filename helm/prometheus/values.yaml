## Prometheus Operator Helm values

# Global settings
global:
  evaluation_interval: 30s
  scrape_interval: 30s
  scrape_timeout: 10s

# Prometheus configuration
prometheus:
  prometheusSpec:
    retention: 15d
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 200m
        memory: 1Gi
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    # Security context for Prometheus pods
    securityContext:
      fsGroup: 2000
      runAsNonRoot: true
      runAsUser: 1000
    # Enable Thanos sidecar for long-term storage (optional)
    # thanos:
    #   baseImage: quay.io/thanos/thanos
    #   version: v0.30.2
    
    # Sample prometheus rules
    additionalRuleLabels:
      cluster: eks-prod
    ruleSelector: {}
    ruleNamespaceSelector: {}
    ruleSelectorNilUsesHelmValues: true
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: true
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}
    podMonitorSelectorNilUsesHelmValues: true

# Alert Manager configuration
alertmanager:
  enabled: true
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 128Mi
    # Configure alert routing
    config:
      global:
        resolve_timeout: 5m
        slack_api_url: 'https://hooks.slack.com/services/YOUR_WEBHOOK_ID'
      route:
        group_by: ['alertname', 'job']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 4h
        receiver: 'slack-notifications'
        routes:
          - match:
              severity: critical
            receiver: 'slack-notifications'
          - match:
              severity: warning
            receiver: 'slack-notifications'
      receivers:
        - name: 'slack-notifications'
          slack_configs:
            - channel: '#monitoring-alerts'
              send_resolved: true
              title: '[{{ .Status | toUpper }}] {{ .CommonLabels.alertname }}'
              text: >-
                {{ range .Alerts }}
                  *Alert:* {{ .Annotations.summary }}
                  *Description:* {{ .Annotations.description }}
                  *Severity:* {{ .Labels.severity }}
                  *Details:*
                  {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* {{ .Value }}
                  {{ end }}
                {{ end }}

# Grafana configuration
grafana:
  enabled: true
  replicas: 1
  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  
  # Service account for Grafana
  serviceAccount:
    create: true
    name: ""
    annotations: {}
  
  # Admin credentials
  adminPassword: "prom-operator"
  
  # Configure datasources
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server.monitoring.svc.cluster.local
          access: proxy
          isDefault: true
  
  # Import dashboards
  dashboards:
    default:
      kubernetes-cluster:
        gnetId: 6417
        revision: 1
        datasource: Prometheus
      node-exporter:
        gnetId: 1860
        revision: 23
        datasource: Prometheus
      eks:
        gnetId: 12239
        revision: 1
        datasource: Prometheus

  # Persistent storage
  persistence:
    enabled: true
    size: 10Gi
    accessModes:
      - ReadWriteOnce

# Node exporter for host metrics
nodeExporter:
  enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 50Mi
    requests:
      cpu: 100m
      memory: 30Mi

# kube-state-metrics for Kubernetes object metrics
kubeStateMetrics:
  enabled: true

# Prometheus Operator
prometheusOperator:
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Default scrape configurations
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    general: true
    k8s: true
    kubeApiserver: true
    kubeApiserverAvailability: true
    kubeApiserverError: true
    kubeApiserverSlos: true
    kubelet: true
    kubePrometheusGeneral: true
    kubePrometheusNodeAlerting: true
    kubePrometheusNodeRecording: true
    kubernetesAbsent: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    prometheus: true
    prometheusOperator: true 